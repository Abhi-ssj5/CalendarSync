from __future__ import print_function

import datetime
import os.path
from urllib.error import HTTPError
from json import dumps

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import Error

SCOPES = ["https://www.googleapis.com/auth/calendar.readonly"]

key_path = "secrets_.json"
token_file = "token.json"

def main():

    # Step 1: Fetch credentials
    creds = None
    if os.path.exists(token_file):
        creds = Credentials.from_authorized_user_file(token_file, SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            print('Cred file found')
            creds.refresh(Request())
        else:
            print('Cred file not found')
            flow = InstalledAppFlow.from_client_secrets_file(key_path, SCOPES)
            creds = flow.run_local_server(port=0)
        with open(token_file, 'w') as token:
            token.write(creds.to_json())
    try:

        # Step 2: Connect to CalenderApi
        service = build("calendar", "v3", credentials=creds)
        currTime = datetime.datetime.utcnow().isoformat() + "Z"
        print("Getting incomming events: 100 for now")

        events_results = service.events().list(
            calendarId="ankushg25@gmail.com",
            # timeMin=currTime,
            maxResults=100,
            singleEvents=True,
            orderBy="startTime",
        ).execute()

        # events_results = service.calendarList().list().execute()
        events = events_results.get("items", [])
        if not events:
            print("No Upcomming Events")
            return

        # for event in events:
            # print(event)
        with open('res.json', 'w') as out:
            out.write(dumps(events))
            # start = event["start"].get("dateTime", event["start"].get("date"))
            # print(start, event["summary"])

    except HTTPError as error:
        print("Error occurrend", error)


if __name__ == "__main__":
    main()
